package main

import (
	"regexp"
	"strings"

	"github.com/julijane/advent-of-code-2023/aoc"
)

func linevalue(line string) int {
	r := regexp.MustCompile("[^0-9]")
	res := r.ReplaceAllString(line, "")
	if len(res) == 0 {
		return 0
	}
	return int(res[0]-'0')*10 + int(res[len(res)-1]-'0')
}

func part1(field *aoc.Field) int {
	sum := 0
	for _, line := range field.Lines() {
		numbers := line.FindObjects(`\d`)
		if len(numbers) != 0 {
			sum += numbers[0].Int()*10 + numbers[len(numbers)-1].Int()
		}

	}
	return sum
}

func part2(input *aoc.Field) int {
	replacements := [][2]string{
		{"one", "o1e"},
		{"two", "t2o"},
		{"three", "t3e"},
		{"four", "4"},
		{"five", "5e"},
		{"six", "6"},
		{"seven", "7n"},
		{"eight", "e8t"},
		{"nine", "n9e"},
	}

	sum := 0
	for _, line := range input.Lines() {
		text := line.Text
		for _, replacement := range replacements {
			text = strings.ReplaceAll(text, replacement[0], replacement[1])
		}
		sum += linevalue(text)
	}

	return sum
}

func calc(field *aoc.Field) (int, int) {
	sumPart1 := part1(field)
	sumPart2 := part2(field)

	return sumPart1, sumPart2
}

func main() {
	aoc.Run("Sample 1", "sample1.txt", calc)
	aoc.Run("Sample 2", "sample2.txt", calc)
	aoc.Run("Main", "input.txt", calc)
}
